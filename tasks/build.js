import fs from 'fs';
import path from 'path';

import gulpLoadPlugins from 'gulp-load-plugins';
import jspm from 'jspm';
import runSequence from 'run-sequence';
import vinylPaths from 'vinyl-paths';

import * as paths from './paths';
import environments from '../src/config/environments';
import gulp from './_gulp';

import packageSpec from '../package.json';


const $ = gulpLoadPlugins();


gulp.task('build:make-settings', () => {
  let env = process.env.ENV || 'development';
  let outfile = path.join(paths.SRC_DIR, paths.SETTINGS);
  let settings = environments[env];
  settings.VERSION = packageSpec.version;
  $.util.log(settings);

  return fs.writeFileSync(outfile,
`// Auto generated by gulp task
// Do **not** modify manually unless you know what you're doing
/* eslint-disable */
const settings = Object.freeze(${JSON.stringify(settings)});
export default settings;`);
});


gulp.task('build:jspm', ['js:lint'], () => jspm.bundle(
  paths.INDEX_SCRIPT_BASE, paths.BUILD_INDEX_JS, {
    minify: false,
    mangle: false,
    sourceMaps: true
  }
));


gulp.task('build:copy_files', () => gulp.src([
  paths.SYSTEM_JS, paths.CONFIG_JS, paths.SRC_INDEX_HTML
])
  .pipe(vinylPaths((paths) => {
    $.util.log(`Copying ${paths}â€¦`);
    return Promise.resolve();
  }))
  .pipe(gulp.dest(paths.BUILD_DIR))
);


gulp.task('build:images', () => gulp.src(paths.SRC_IMAGE)
  .pipe($.imagemin({
    progressive: true,
    interlaced: true
  }))
  .pipe(gulp.dest(paths.BUILD_DIR))
);


gulp.task('build', (callback) => runSequence(
    ['clean:build', 'build:make-settings'],
    ['build:copy_files', 'build:jspm', 'build:images'],
    callback
));
